/**
 * Icons
 *
 * @author Dominique Rau [domi.github@gmail.com](mailto:domi.github@gmail.com)<br/>
 * @version 0.0.1
 */
// {{comment}}
// tslint:disable:max-line-length
// tslint:disable:cyclomatic-complexity
{% if tslintDisable %}
/* tslint:disable */
{% endif %}
import * as React from 'react';

export type IconKind =
	{%- for icon in icons %}
	| '{{icon.name}}'
	{%- endfor %};

export const iconList: IconKind[] = [
	{%- for icon in icons %}
	'{{icon.name}}',
	{%- endfor %}
];

export interface IconProps {
	color?: string;
	fillRule?: 'nonzero' | 'evenodd' | 'inherit';
	strokeColor?: string;
	className?: string;
	height?: number;
	kind?: IconKind;
	onClick?(): void;
	preview?: boolean;
	size?: number;
	style?: any;
	width?: number;
	wrapperStyle?: any;
}
export default class Icon extends React.Component<IconProps, {}> {

	public static defaultProps = {
		className: '',
		color: 'currentColor',
		size: 32,
	};

	public render() {
		const { kind, preview } = this.props;

		return preview ? this.renderPreview() : this.renderIcon(kind);
	}

	public renderPreview() {

		return (<div>{ iconList.map(kind => this.renderPreviewKind(kind)) }</div>);
	}

	public renderIcon(kind: string) {
		const { wrapperStyle } = this.props;
		if (wrapperStyle) {
			return (<div style={wrapperStyle}>{ this.getIcon(kind) }</div>);
		}

		return this.getIcon(kind);
	}

	public renderPreviewKind(kind: string) {
		return (
			<div key={kind}>
				<h3>&lt;Icon kind="{kind}" /&gt;</h3>
				{ this.renderIcon(kind) }
			</div>
		);
	}

	public getIcon(kind: string) {
		const { color, strokeColor, height, onClick, size, style, width, className, fillRule } = this.props;

		switch (kind) {
			{% for icon in icons -%}
			case ('{{icon.name}}'): return ({{icon.svg | safe}});
			{% endfor -%}
			default: return null;
		}
	}
}
